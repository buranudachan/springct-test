{"version":3,"sources":["module/app-ducks/appActions.ts","module/containers/userDetail/ducks/userActions.ts","module/service/serviceRequest.ts","module/service/api.ts","module/containers/login/ducks/loginAction.ts","module/containers/userDetail/ducks/userSelectors.ts","module/containers/userDetail/components/addUserFrom.tsx","module/containers/userDetail/index.tsx","module/containers/login/ducks/loginSelecter.ts","module/app-ducks/store.ts","module/containers/login/index.tsx","module/containers/App/index.tsx","module/containers/login/ducks/loginReducer.ts","module/containers/userDetail/ducks/userReducers.ts","module/app-ducks/reducer-lists.ts","module/app-ducks/reducers.ts","module/NextApp.tsx","serviceWorker.ts","index.tsx"],"names":["Type","createAction","SET_CURRENT_PATH","appActions","XHRInstance","request","args","a","options","Promise","resolve","reject","Axios","then","Response","success","catch","error","console","log","exceptionHandler","Error","result","errorCode","header","message","JSON","stringify","GET_USER_DETAIL_REQUEST","serviceRequest","method","url","data","getUserDetailResponse","GET_USER_DETAIL_RESPONSE","UserActions","userSelectors","getUserData","createSelector","state","userStateData","AddUsersForm","props","isUserLogged","handleSubmit","bind","getFieldDecorator","this","form","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","title","visible","footer","width","closable","onSubmit","className","label","rules","required","placeholder","type","Group","value","onClick","close","e","preventDefault","validateFields","err","values","Modal","content","addUserDetail","React","Component","addUserForms","Form","create","columns","dataIndex","key","UserDetial","userDetail","isAddUser","setState","push","usersdata","localStorage","getItem","userDataParse","parse","Fragment","isUser","addUser","style","backgroundColor","dataSource","closeAddUserForm","connect","dispatch","actions","bindActionCreators","omit","ADD_USER_DETAIL","LoginActions","middleware","loginSelecter","getLoginData","loginStateData","Login","htmlType","block","borderRadius","setItem","history","loginForm","AppComponent","exact","path","component","App","Login_INITIAL_STATE","loginDetail","LoginReducer","handleActions","action","payload","USER_INITIAL_STATE","reducerList","reducerInitialState","router","location","pathname","search","undefined","hash","reducers","combineReducers","connectRouter","createBrowserHistory","sagaMiddleware","sagaMiddlewareFactory","routeMiddleware","routerMiddleware","applyMiddleware","store","createStore","NextApp","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2efa0264.chunk.js","sourcesContent":["/**\n * App actions\n */\nimport { createAction } from 'redux-actions';\n\nexport namespace appActions {\n    export enum Type {\n\n        SET_CURRENT_PATH = 'SET_CURRENT_PATH'\n    }\n\n    export const setCurrentPath = createAction(Type.SET_CURRENT_PATH);\n}","import { createAction } from 'redux-actions';\nimport { getUserDetails } from '../../../service/api';\n\n\nexport namespace UserActions {\n    export enum Type {\n        GET_USER_DETAIL_REQUEST = 'GET_USER_DETAIL_DETAIL_REQUEST',\n        GET_USER_DETAIL_RESPONSE = 'GET_USER_DETAIL_RESPONSE',\n    }\n\n    export const getUserDetailRequest = createAction(Type.GET_USER_DETAIL_REQUEST, async () => {\n        const data: any = await getUserDetails();\n        if (data.success) {\n            getUserDetailResponse(data.success.data.data);\n        }\n\n    });\n    export const getUserDetailResponse = createAction(Type.GET_USER_DETAIL_RESPONSE, (data: any) => data);\n\n}","/**\n * Calling REST API\n */\n\nimport Axios, { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';\n\nclass ServiceRquest {\n    public request = async (args: AxiosRequestConfig) => {\n        const options: AxiosRequestConfig = {\n            ...args\n        };\n\n        return new Promise((resolve, reject) => {\n\n            const controledAxios = Axios(options);\n\n            controledAxios.then(async (Response: AxiosResponse) => {\n                resolve({ success: Response });\n            }).catch(async (error: AxiosError) => {\n                // tslint:disable no-console\n                console.log('API error', error);\n\n                const exceptionHandler = new Error();\n                let result = {};\n\n                result = [{\n                    errorCode: 'errorCode',\n                    header: 'errorHeader',\n                    message: 'error message'\n                }];\n\n                exceptionHandler.message = JSON.stringify(result);\n\n                reject(exceptionHandler);\n            });\n        });\n    }\n}\n\nconst XHRInstance = new ServiceRquest();\n\nexport { XHRInstance as serviceRequest };","import { serviceRequest } from \"./serviceRequest\";\n\nexport function getUserDetails() {\n    const options: any = {\n        method: 'get',\n        url: ''\n    };\n    return serviceRequest.request(options);\n}","import { createAction } from 'redux-actions';\n\n\nexport namespace LoginActions {\n    export enum Type {\n        ADD_USER_DETAIL = 'ADD_USER_DETAIL',\n    }\n    export const setUserLoginData = createAction(Type.ADD_USER_DETAIL, (data: any) => data);\n\n}","/**\n * Selectors for User Detail\n */\nimport { createSelector } from 'reselect';\nimport { ApplicationState } from '../../../app-ducks/types';\nimport { UserState } from './types';\n\nexport const fetchUserData = (state: ApplicationState) => state.userStateData;\n\nconst userSelectors = {\n    getUserData: createSelector(\n        [fetchUserData],\n        (data: UserState) => data\n    )\n};\n\nexport default userSelectors;","import React, { FormEvent } from \"react\";\nimport { omit } from \"lodash\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport FormItem from \"antd/lib/form/FormItem\";\nimport { Button, Col, Form, Input, Modal, Radio, Row, Tooltip } from \"antd\";\nimport { AddUserFromProps } from \"../ducks/types\";\n\nclass AddUsersForm extends React.Component<AddUserFromProps, any> {\n    constructor(props: AddUserFromProps) {\n        super(props);\n        this.state = {\n            isUserLogged: false\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n    }\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: { span: 24 },\n                sm: { span: 8 },\n            },\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 16 },\n            },\n        };\n        const tailFormItemLayout = {\n            wrapperCol: {\n                xs: {\n                    span: 24,\n                    offset: 0,\n                },\n                sm: {\n                    span: 16,\n                    offset: 8,\n                },\n            },\n        };\n        return (\n            <div >\n                <Modal\n                    title=\"Add User\"\n                    visible={true}\n                    footer={false}\n                    width=\"60%\"\n                    closable={false}\n                >\n                    <Form\n                        onSubmit={this.handleSubmit}\n                        className=\"gx-signin-form gx-form-row0\"\n                    >\n                        <Row>\n                            <Col span={12}>\n                                <FormItem {...formItemLayout} label=\"First Name\">\n                                    {getFieldDecorator(\"first_name\", {\n                                        rules: [\n                                            {\n                                                required: true,\n                                                message: \"Please enter First Name!\",\n                                            },\n                                        ],\n                                    })(<Input placeholder=\"First Name\" />)}\n                                </FormItem>\n                            </Col>\n                            <Col span={12}>\n                                <FormItem {...formItemLayout} label=\"Last Name\">\n                                    {getFieldDecorator(\"last_name\", {\n                                        rules: [\n                                            {\n                                                required: true,\n                                                message: \"Please enter Last Name!\",\n                                            },\n                                        ],\n                                    })(<Input placeholder=\"Last Name\" />)}\n                                </FormItem>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col span={12}>\n                                <FormItem {...formItemLayout} label=\"Address  \">\n                                    {getFieldDecorator(\"address\", {\n                                        rules: [\n                                            {\n                                                required: true,\n                                                message: \"Please enter Address!\",\n                                            },\n                                        ],\n                                    })(<Input type=\"address\" placeholder=\"Address\" />)}\n                                </FormItem>\n                            </Col>\n                            <Col span={12}>\n                                <FormItem {...formItemLayout} label=\"Phone No  \">\n                                    {getFieldDecorator(\"phoneNumber\", {\n                                        rules: [\n                                            {\n                                                required: true,\n                                                message: \"Please enter Phone Number!\",\n                                            },\n                                        ],\n                                    })(<Input placeholder=\"Phone Number\" />)}\n                                </FormItem>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col span={12}>\n                                <FormItem {...formItemLayout} label=\"Role      \">\n                                    {getFieldDecorator(\"role\", {\n                                        rules: [\n                                            {\n                                                required: true,\n                                                message: \"Please select Role!\",\n                                            },\n                                        ],\n                                    })(<Radio.Group>\n                                        <Radio value=\"Admin\">Admin</Radio>\n                                        <Radio value=\"HOD\">HOD</Radio>\n                                    </Radio.Group>)}\n                                </FormItem>\n                            </Col>\n                            <Col span={12}>\n                                <FormItem {...formItemLayout} label=\"Email     \">\n                                    {getFieldDecorator(\"email\", {\n                                        rules: [\n                                            {\n                                                required: true,\n                                                message: \"Please enter email!\",\n                                            },\n                                        ],\n                                    })(<Input type=\"email\" placeholder=\"email\" />)}\n                                </FormItem>\n                            </Col>\n                        </Row>  <br></br>\n                        <br></br>\n                        <FormItem {...tailFormItemLayout}>\n                            <Row className=\"gx-pb-0\">\n                                <Col span={18}></Col>\n                                <Col span={3}>\n                                    <button className=\"ant-btn ant-btn-primary ant-btn-background-ghost gx-pb-0 gx-mt-2\">\n                                        Add                                    </button>\n                                </Col>\n                                <Col span={3}>\n                                    <button\n                                        className=\"ant-btn ant-btn-danger ant-btn-background-ghost gx-pb-0 gx-mt-2\"\n                                        onClick={() => this.props.close()}\n                                    >\n                                        Cancel                                    </button>\n                                </Col>\n                            </Row>\n                        </FormItem>\n                    </Form>\n\n\n                </Modal>\n            </div>\n\n        );\n    }\n    private handleSubmit(e: FormEvent) {\n        e.preventDefault();\n\n        this.props.form &&\n            this.props.form.validateFields((err: any, values: { isUser: string; }) => {\n                if (!err) {\n\n                    Modal.success({\n                        content: 'User created successfully.',\n                    });\n                    this.props.addUserDetail(values);\n                    this.props.close();\n                }\n            });\n    }\n}\n\nconst addUserForms = Form.create<AddUserFromProps>()(AddUsersForm);\n\nexport default addUserForms\n","import React from \"react\";\nimport { Table, Card, Row, Col, Button } from \"antd\";\nimport { ApplicationState } from \"../../app-ducks/types\";\nimport { omit } from \"lodash\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { UserComponentProps } from \"./ducks/types\";\nimport { UserActions } from \"./ducks/userActions\";\nimport userSelectors from \"./ducks/userSelectors\";\nimport AddUsersForm from \"./components/addUserFrom\"\nconst columns = [\n    {\n        title: 'First Name',\n        dataIndex: 'first_name',\n        key: '1',\n    },\n    {\n        title: 'Last Name',\n        dataIndex: 'last_name',\n        key: '2',\n    },\n    {\n        title: 'Phone Number',\n        dataIndex: 'phoneNumber',\n        key: '3',\n    },\n    {\n        title: 'Address',\n        dataIndex: 'address',\n        key: '4',\n    }\n];\nclass UserDetial extends React.Component<UserComponentProps, any> {\n    usersdata: any;\n    constructor(props: UserComponentProps) {\n        super(props);\n        this.state = {\n            userDetail: [],\n            isAddUser: false\n        }\n    }\n    addUser() {\n        this.setState({ isAddUser: true })\n    }\n    closeAddUserForm() {\n        this.setState({ isAddUser: false })\n    }\n    addUserDetail(data: any) {\n        var userDetail = this.state.userDetail;\n        userDetail.push(data)\n        this.setState({\n            userDetail: userDetail\n        })\n    }\n    public render() {\n        const usersdata: any = localStorage.getItem(\"userData\");\n        const userDataParse = JSON.parse(usersdata);\n        return (\n            <React.Fragment>\n                <Row>\n                    <Col span={24}>\n                    </Col>\n                </Row>\n                <br></br>\n                <Row>\n                    <Col span={21}>\n                    </Col>\n                    <Col span={3}>\n                        {userDataParse.isUser === \"Admin\" ? <Button onClick={() => this.addUser()} style={{\n                            backgroundColor: \"#0000FF\",\n                        }}>Add User</Button> : \"\"}\n                    </Col>\n                </Row>\n                <Card>\n                    <Table dataSource={this.state.userDetail} columns={columns} />;\n                </Card>\n                { this.state.isAddUser ? <AddUsersForm addUserDetail={(data: any) => this.addUserDetail(data)} close={() => this.closeAddUserForm()} /> : \"\"}\n            </React.Fragment >\n        );\n    }\n}\nconst mapStateToProps = (state: ApplicationState) => {\n    return {\n        ...userSelectors.getUserData(state),\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        actions: {\n            ...bindActionCreators(omit(UserActions, [\"Type\"]) as any, dispatch),\n        },\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UserDetial);\n","/**\n * Selectors for User Detail\n */\nimport { createSelector } from 'reselect';\nimport { ApplicationState } from '../../../app-ducks/types';\nimport { LoginState } from './types';\n\nexport const fetchLoginData = (state: ApplicationState) => state.loginStateData;\n\nconst loginSelecter = {\n    getLoginData: createSelector(\n        [fetchLoginData],\n        (data: LoginState) => data\n    )\n};\n\nexport default loginSelecter;","import { Store, createStore, applyMiddleware, Middleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { routerMiddleware } from 'connected-react-router';\nimport sagaMiddlewareFactory from 'redux-saga';\nimport { ApplicationState } from './types';\nimport reducers from './reducers';\nimport { reducerInitialState } from './reducer-lists';\nimport { createBrowserHistory } from 'history';\n\n\nexport const history = createBrowserHistory();\n\n// custom logger\nconst logger: Middleware = (applicationStore) => (next) => (action) => {\n    if (process.env.NODE_ENV !== 'production') {\n        // tslint:disable no-console\n        console.log('Action Dispatched', action);\n        const returnValue = next(action);\n        console.log('New State', applicationStore.getState());\n        // tslint:enable no-console\n\n        return returnValue;\n    }\n\n    return next(action);\n};\n\n// Saga Middleware\nconst sagaMiddleware = sagaMiddlewareFactory();\nconst routeMiddleware = routerMiddleware(history);\nlet middleware;\n\nif (process.env.NODE_ENV !== 'production') {\n    middleware = applyMiddleware(logger, sagaMiddleware, routeMiddleware);\n    middleware = composeWithDevTools(middleware);\n} else {\n    middleware = applyMiddleware(sagaMiddleware, routeMiddleware);\n}\n\nconst store: Store<ApplicationState> = createStore(reducers(history), reducerInitialState, middleware);\n\n\nexport default store;","import React, { FormEvent } from \"react\";\nimport { ApplicationState } from \"../../app-ducks/types\";\nimport { omit } from \"lodash\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { LoginActions } from \"./ducks/loginAction\";\nimport { LoginComponentProps } from \"./ducks/types\";\nimport loginSelecter from \"./ducks/loginSelecter\";\nimport FormItem from \"antd/lib/form/FormItem\";\nimport { Button, Form, Input, Modal } from \"antd\";\n\nclass Login extends React.Component<LoginComponentProps, any> {\n    constructor(props: LoginComponentProps) {\n        super(props);\n        this.state = {\n            isUserLogged: false\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n    }\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: { span: 24 },\n                sm: { span: 8 },\n            },\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 16 },\n            },\n        };\n        const tailFormItemLayout = {\n            wrapperCol: {\n                xs: {\n                    span: 24,\n                    offset: 0,\n                },\n                sm: {\n                    span: 16,\n                    offset: 8,\n                },\n            },\n        };\n\n        return (\n            <div className=\"gx-app-login-wrap\">\n                <div className=\"gx-app-login-container\">\n                    <div className=\"gx-app-login-main-content\">\n\n                        <div className=\"gx-app-login-content gx-mt-0\">\n                            <Form\n                                onSubmit={this.handleSubmit}\n                            >\n                                <FormItem {...formItemLayout} label=\"Username\">\n                                    {getFieldDecorator(\"userName\", {\n                                        rules: [\n                                            {\n                                                required: true,\n                                                message: \"The input your username!\",\n                                            },\n                                        ],\n                                    })(<Input placeholder=\"userName\" />)}\n                                </FormItem>\n                                <FormItem {...formItemLayout} label=\"Password\">\n                                    {getFieldDecorator(\"password\", {\n                                        rules: [\n                                            {\n                                                required: true,\n                                                message: \"Please input your Password!\",\n                                            },\n                                        ],\n                                    })(<Input type=\"password\" placeholder=\"Password\" />)}\n                                </FormItem>\n\n                                <br></br>\n                                <br></br>\n                                <FormItem>\n                                    <div className=\"center\">\n                                        <Button\n                                            className=\"gx-mb-0 gx-text-white\"\n                                            htmlType=\"submit\"\n                                            block\n                                            style={{\n                                                borderRadius: \"20px\",\n                                                backgroundColor: \"#1eb2a6\",\n                                            }}\n                                        >\n                                            Login\n                                        </Button>\n                                    </div>\n                                </FormItem>\n                            </Form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n    private handleSubmit(e: FormEvent) {\n        e.preventDefault();\n        this.props.form &&\n            this.props.form.validateFields((err, values) => {\n                if (!err) {\n                    values.isUser = \"Admin\";\n                    localStorage.setItem(\"userData\", JSON.stringify(values));\n                    this.props.history.push(\"/userDetail\");\n                }\n            });\n    }\n}\nconst mapStateToProps = (state: ApplicationState) => {\n    return {\n        ...loginSelecter.getLoginData(state),\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        actions: {\n            ...bindActionCreators(omit(LoginActions, [\"Type\"]) as any, dispatch),\n        },\n    };\n};\nconst loginForm = Form.create<LoginComponentProps>()(Login);\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(loginForm);\n","import React from 'react';\r\nimport { omit } from 'lodash';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { ConfigProvider } from 'antd';\r\nimport { Dispatch, bindActionCreators } from 'redux';\r\nimport { appActions } from '../../app-ducks/appActions';\r\nimport { connect } from 'react-redux';\r\nimport { ApplicationState } from '../../app-ducks/types';\r\nimport userDetail from '../userDetail';\r\nimport Login from '../login'\r\nclass AppComponent extends React.Component<any, any>{\r\n\r\n  public render() {\r\n    return (\r\n      <ConfigProvider >\r\n        <Switch>\r\n          <Route exact path='/' component={Login} />\r\n          <Route exact path='/userDetail' component={userDetail} />\r\n\r\n        </Switch>\r\n      </ConfigProvider>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: ApplicationState) => {\r\n  return {\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n  return {\r\n    actions: {\r\n      // tslint: disable no-any\r\n      ...bindActionCreators(omit(appActions, ['Type']) as any, dispatch)\r\n      // tslint: enable no-any\r\n    }\r\n  };\r\n};\r\n\r\nconst App = connect(mapStateToProps, mapDispatchToProps)(AppComponent);\r\n\r\nexport default (App);\r\n","/**\n * Login  reducer\n */\nimport { handleActions } from 'redux-actions';\nimport { LoginActions } from './loginAction';\n\n\nexport const Login_INITIAL_STATE: any = {\n    loginDetail: []\n};\n\nconst LoginReducer = handleActions<any, any>(\n    {\n        [LoginActions.Type.ADD_USER_DETAIL]: (state, action) => {\n            return {\n                ...state,\n                loginDetail: action.payload\n            }\n        }\n    }, Login_INITIAL_STATE\n);\n\nexport default LoginReducer;","/**\n * User List reducer\n */\nimport { handleActions } from 'redux-actions';\nimport { UserActions } from './userActions';\n\n\nexport const USER_INITIAL_STATE: any = {\n    userDetail: []\n\n};\n\nconst UserReducer = handleActions<any, any>(\n    {\n        [UserActions.Type.GET_USER_DETAIL_REQUEST]: (state, action) => {\n            console.log('action', action)\n            return {\n                ...state,\n                userDetail: action.payload\n            }\n        }\n    }, USER_INITIAL_STATE\n);\n\nexport default UserReducer;","/**\n * Reducer List\n */\n\nimport LoginReducer, { Login_INITIAL_STATE } from '../containers/login/ducks/loginReducer';\nimport UserReducer, { USER_INITIAL_STATE } from '../containers/userDetail/ducks/userReducers';\n\nconst reducerList = {\n    userStateData: UserReducer,\n    loginStateData: LoginReducer\n};\n\nexport default reducerList;\n\ntype Action = 'PUSH' | 'POP' | 'REPLACE';\nconst ActionData: Action = 'POP';\nexport const reducerInitialState = {\n    router: { location: { pathname: '', search: '', state: undefined, hash: '' }, action: ActionData },\n    userStateData: USER_INITIAL_STATE,\n    loginStateData: Login_INITIAL_STATE\n};","import { ApplicationState } from './types';\nimport { combineReducers, Reducer } from 'redux';\nimport reducerList from './reducer-lists';\nimport { connectRouter } from 'connected-react-router';\nimport { History } from 'history';\n\n/**\n * Combine reducers\n */\nconst reducers: (history: History) => Reducer<ApplicationState> = (history: History) => combineReducers<ApplicationState>({\n    router: connectRouter(history),\n    ...reducerList\n});\n\nexport default reducers;","import React from 'react';\r\nimport { Provider } from 'react-redux'\r\nimport { ConnectedRouter } from 'connected-react-router'\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport '../assets/vendors/style';\r\nimport '../assets/styles/wieldy.less';\r\nimport App from './containers/App/index';\r\nimport store, { history } from './app-ducks/store';\r\n\r\nconst NextApp = () =>\r\n  <Provider store={store}>\r\n    <ConnectedRouter history={history}>\r\n      <Switch>\r\n        <Route path='/' component={App} />\r\n      </Switch>\r\n    </ConnectedRouter>\r\n  </Provider>;\r\n\r\n\r\nexport default NextApp;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport NextApp from './module/NextApp';\nimport { AppContainer } from 'react-hot-loader';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst render = (Component: any) => {\n  ReactDOM.render(\n    // Wrap App inside AppContainer\n    <AppContainer>\n      <Component />\n    </AppContainer>,\n    document.getElementById('root')\n  );\n};\n\n// Render once\nrender(NextApp);\n\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n// tslint:disable-next-line no-any\n// declare let module: { hot: any };\n// Webpack Hot Module Replacement API\n// if (module.hot) {\n//   module.hot.accept('./module/NextApp', () => {\n//     render(NextApp);\n//   });\n// }"],"sourceRoot":""}